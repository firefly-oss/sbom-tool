name: SBOM Generation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday
  workflow_dispatch:

jobs:
  sbom-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Firefly SBOM Tool
      run: |
        pip install -e .
    
    - name: Run SBOM Scan
      run: |
        firefly-sbom scan --path . --format all --audit --output sbom-report
    
    - name: Upload SBOM Reports
      uses: actions/upload-artifact@v4
      with:
        name: sbom-reports
        path: sbom-report*
        retention-days: 30
    
    - name: Build Vulnerability Summary
      id: vuln_summary
      shell: bash
      run: |
        python - <<'PY'
        import json
        import os
        from pathlib import Path
        from firefly_sbom.core import SBOMGenerator
        
        gen = SBOMGenerator()
        data = gen.scan_repository(Path('.'), audit=True)
        vulns = data.get('vulnerabilities', [])
        # Normalize fields and compute severity counts
        counts = {k: 0 for k in ['critical','high','medium','low','unknown']}
        for v in vulns:
            sev = (v.get('severity') or 'unknown').lower()
            counts[sev] = counts.get(sev, 0) + 1
            # Ensure presence of keys
            v['id'] = v.get('id') or v.get('cve') or v.get('ghsa') or 'UNKNOWN'
            v['component'] = v.get('component', 'Unknown')
            v['component_version'] = v.get('component_version', '')
            v['cvss_score'] = v.get('cvss_score', '')
            v['description'] = (v.get('description') or v.get('summary') or '')[:500]
            v['references'] = v.get('references') or []
        summary = {
            'total': len(vulns),
            'by_severity': counts,
            'vulnerabilities': vulns,
        }
        Path('sbom-vuln-summary.json').write_text(json.dumps(summary, indent=2))
        
        # Build a detailed Markdown body
        lines = []
        lines.append('# ðŸš¨ Critical vulnerabilities detected')
        lines.append('')
        lines.append('This issue was created automatically from the SBOM security audit. It includes a summary and detailed list of detected vulnerabilities.')
        lines.append('')
        lines.append('## Summary')
        lines.append(f"- Total: {summary['total']}")
        lines.append(f"- Critical: {summary['by_severity'].get('critical',0)} | High: {summary['by_severity'].get('high',0)} | Medium: {summary['by_severity'].get('medium',0)} | Low: {summary['by_severity'].get('low',0)} | Unknown: {summary['by_severity'].get('unknown',0)}")
        lines.append('')
        lines.append('## Top Issues')
        lines.append('')
        lines.append('| ID | Severity | Component | Version | CVSS | Description | References |')
        lines.append('|---|---|---|---|---|---|---|')
        # Sort by severity and CVSS if present
        sev_order = {'critical':0,'high':1,'medium':2,'low':3,'unknown':4}
        def keyfn(v):
            s = sev_order.get((v.get('severity') or 'unknown').lower(), 4)
            try:
                c = float(v.get('cvss_score') or 0)
            except Exception:
                c = 0.0
            return (s, -c)
        for v in sorted(vulns, key=keyfn)[:50]:
            refs = v.get('references') or []
            refs_md = ' '.join(f"[link]({r})" for r in refs[:3])
            desc = (v.get('description') or '').replace('\n',' ').replace('|','\|')
            if len(desc) > 180:
                desc = desc[:180] + 'â€¦'
            lines.append(f"| {v.get('id')} | {v.get('severity','UNKNOWN').upper()} | {v.get('component')} | {v.get('component_version','')} | {v.get('cvss_score','')} | {desc} | {refs_md} |")
        
        md = '\n'.join(lines)
        Path('sbom-vuln-issue.md').write_text(md)
        
        # Set outputs for conditional issue creation
        has_crit = summary['by_severity'].get('critical',0) > 0
        with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            fh.write(f"has_critical={'true' if has_crit else 'false'}\n")
        PY
    
    - name: Create Issue for Vulnerabilities
      if: steps.vuln_summary.outputs.has_critical == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const body = fs.readFileSync('sbom-vuln-issue.md', 'utf8');
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Critical vulnerabilities detected in dependencies',
            body,
            labels: ['security', 'dependencies', 'automated']
          })
